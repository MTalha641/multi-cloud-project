name: Multi-Cloud Deployment

on:
  push:
    branches:
      - main

jobs:
  build_and_deploy:
    runs-on: ubuntu-22.04

    steps:
  
    - name: Checkout code
      uses: actions/checkout@v2

  
    - name: Set up Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '16'

   
    - name: Install dependencies for frontend
      run: |
        cd client
        npm install

    - name: Build frontend
      run: |
        cd client
        npm run build

  
    - name: Deploy frontend to AWS S3
      run: |
        aws s3 sync client/build/ s3://$AWS_S3_BUCKET_NAME --delete --region $AWS_REGION
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
        AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}

   
    - name: Set up Docker
      uses: docker/setup-buildx-action@v1

   
    - name: Build Docker image for backend
      run: |
        cd server
        docker build -t $AZURE_CONTAINER_REGISTRY/backend:latest .

  
    - name: Log in to Azure
      run: |
        az login --service-principal -u $AZURE_CLIENT_ID -p $AZURE_CLIENT_SECRET --tenant $AZURE_TENANT_ID

    - name: Log in to Azure Container Registry
      run: |
        echo $AZURE_CLIENT_SECRET | docker login $AZURE_CONTAINER_REGISTRY --username $AZURE_CLIENT_ID --password-stdin

   
    - name: Push Docker image to Azure Container Registry
      run: |
        docker push $AZURE_CONTAINER_REGISTRY/backend:latest

    
    - name: Deploy backend to Azure Web App Service
      run: |
        az webapp create \
          --resource-group $AZURE_RESOURCE_GROUP \
          --plan $AZURE_APP_SERVICE_PLAN \
          --name $AZURE_WEB_APP_NAME \
          --deployment-container-image-name $AZURE_CONTAINER_REGISTRY/backend:latest

   
    - name: Set up Terraform CLI
      uses: hashicorp/setup-terraform@v2
      with:
        # terraform_version: 1.5.0 add ur latest version

    - name: Initialize Terraform
      run: terraform init
      working-directory: ./multi-cloud-project
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    
    - name: Plan Terraform Changes
      run: terraform plan
      working-directory: ./multi-cloud-project
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

   
    - name: Apply Terraform Changes
      run: terraform apply -auto-approve
      working-directory: ./multi-cloud-project
      env:
        ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
        ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    
    - name: Notify Deployment Success
      run: echo "Deployment successful!"
